use chrono::NaiveDate;
use std::io::{self, Write};
use std::vec::Vec;


#[derive(Debug)]
struct Task {
    title: String,
    description: String,
    due_date: NaiveDate,
    priority: Priority,
    status: Status,
}

#[derive(Debug, PartialEq, Eq, Hash)]
enum Priority {
    Chill,
    NotUrgent,
    Urgent,
}

#[derive(Debug, PartialEq, Eq, Hash)]
enum Status {
    ToDo,
    Done,
}

impl Task {
    fn to_string(&self) -> String {
        format!(
            "{} - Due: {} - Priority: {:?} - Status: {:?}",
            self.title,
            self.due_date.format("%Y-%m-%d"),
            self.priority,
            self.status
        )
    }
}

struct TaskManager {
    tasks: Vec<Task>,
}

impl TaskManager {
    fn add_task(
        &mut self,
        title: String,
        description: String,
        due_date_str: &str,
        priority_str: &str,
    ) -> Result<(), String> {
        match NaiveDate::parse_from_str(due_date_str, "%Y-%m-%d") {
            Ok(due_date) => {
                let priority = match priority_str.to_uppercase().as_str() {
                    "CHILL" => Priority::Chill,
                    "NOT_URGENT" => Priority::NotUrgent,
                    "URGENT" => Priority::Urgent,
                    _ => return Err("Invalid priority.".to_string()),
                };
                let new_task = Task {
                    title,
                    description,
                    due_date,
                    priority,
                    status: Status::ToDo,
                };
                self.tasks.push(new_task);
                println!("Task added -> {:?}", self.tasks.last().unwrap());
                Ok(())
            }
            Err(_) => Err("Invalid date format. Use YYYY-MM-DD.".to_string()),
        }
    }

    fn list_tasks(&self) {
        if self.tasks.is_empty() {
            println!("No tasks available.");
        } else {
            println!("Tasks:");
            for (i, task) in self.tasks.iter().enumerate() {
                println!("{}: {}", i, task.to_string());
            }
        }
    }

    fn edit_task(&mut self, task_id: usize, title: String, description: String) -> Result<(), String> {
        if let Some(task) = self.tasks.get_mut(task_id) {
            task.title = title;
            task.description = description;
            Ok(())
        } else {
            Err("Task ID not found.".to_string())
        }
    }

    fn delete_task(&mut self, task_id: usize) -> Result<(), String> {
        if task_id < self.tasks.len() {
            self.tasks.remove(task_id);
            Ok(())
        } else {
            Err("Task ID not found.".to_string())
        }
    }

    fn mark_task_as_completed(&mut self, task_id: usize) -> Result<(), String> {
        if let Some(task) = self.tasks.get_mut(task_id) {
            task.status = Status::Done;
            Ok(())
        } else {
            Err("Task ID not found.".to_string())
        }
    }

    fn count_tasks_status(&self) -> (usize, usize) {
        let tasks_done = self.tasks.iter().filter(|task| task.status == Status::Done).count();
        let tasks_todo = self.tasks.len() - tasks_done;
        (tasks_done, tasks_todo)
    }
}

fn main() {
    let mut task_manager = TaskManager { tasks: vec![] };

    loop {
        println!("\nCommand List: add / list / edit / delete / complete / count / exit");
        print!("Enter command: ");
        io::stdout().flush().unwrap();

        let mut command = String::new();
        io::stdin().read_line(&mut command).expect("Failed to read line");
        let command = command.trim();

        match command {
            "add" => {
                let title = get_input("Enter title for the task: ");
                let description = get_input("Enter description for the task: ");
                let due_date_str = get_input("Enter due date in YYYY-MM-DD format: ");
                let priority_str = get_input("Enter priority (CHILL/NOT_URGENT/URGENT): ");

                if let Err(err) = task_manager.add_task(title, description, &due_date_str, &priority_str) {
                    println!("Error adding task: {}", err);
                } else {
                    println!("Task added successfully.");
                }
            }
            "list" => task_manager.list_tasks(),

            "edit" => {
                println!("Enter the task ID to edit:");
                let task_id = get_input_as_usize();

                println!("Enter updated title:");
                let title = get_input("Updated Title: ");

                println!("Enter updated description:");
                let description = get_input("Updated Description: ");

                if let Err(err) = task_manager.edit_task(task_id, title, description) {
                    println!("Error editing task: {}", err);
                } else {
                    println!("Task updated successfully.");
                }
            }

            "delete" => {
                println!("Enter the task ID to delete:");
                let task_id = get_input_as_usize();

                if let Err(err) = task_manager.delete_task(task_id) {
                    println!("Error deleting task: {}", err);
                } else {
                    println!("Task deleted successfully.");
                }
            }

            "complete" => {
                println!("Enter the task ID to mark as completed:");
                let task_id = get_input_as_usize();

                if let Err(err) = task_manager.mark_task_as_completed(task_id) {
                    println!("Error marking task as completed: {}", err);
                } else {
                    println!("Task marked as completed.");
                }
            }

            "count" => {
                let (tasks_done, tasks_todo) = task_manager.count_tasks_status();
                println!("Tasks DONE -> {}, Tasks TO_DO -> {}", tasks_done, tasks_todo);
            }

            "exit" => break,

            _ => println!("Invalid command."),
        }
    }
}

fn get_input_as_usize() -> usize {
    loop {
        let input = get_input("Enter a number: ");
        if let Ok(number) = input.trim().parse::<usize>() {
            break number;
        } else {
            println!("Invalid input. Please enter a number.");
        }
    }
}

fn get_input(prompt: &str) -> String {
    print!("{}", prompt);
    io::stdout().flush().unwrap();

    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    input.trim().to_string()
}
